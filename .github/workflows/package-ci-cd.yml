name: Package CI/CD

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ enh/*]

jobs:
  style-test:
    name: Style Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Setup environment with uv
        run: |
          uv venv .venv-dev
          source .venv-dev/bin/activate
          uv pip install -e ".[formatter]"
          uv run isort .
          uv run black .
          uv run flake8 .

  test:
    name: Unit and Functional Tests
    runs-on: ubuntu-latest
    needs: 
      style-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install package in dev mode
        run: |
          uv venv .venv-test
          source .venv-test/bin/activate        
          uv pip install -r pyproject.toml
          uv pip install -e .
          uv pip install pytest
          source .venv-test/bin/activate
          uv build
          uv run pytest tests
        # The workflow will fail automatically if pytest returns non-zero exit code

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: 
      test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: '3.12'

      - name: Setup env
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          uv venv .venv-dev
          source .venv-dev/bin/activate
          uv pip install .
          uv pip install build
          sudo apt-get install -y tree
          tree -a -I '.git'
          uv build
          tree -a -I '.git'

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: build-artifacts
          path: |
            dist/
            pyproject.toml

  install:
    name: Install and Test Package
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4.3.0
        with:
          name: build-artifacts
          path: artifacts

      - name: Set up Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: '3.12'

      - name: Install uv and test
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

          uv venv .venv-dev
          source .venv-dev/bin/activate
          uv pip install artifacts/dist/*.whl

          # echo "Running ingest_data at $(date '+%Y-%m-%d %H:%M:%S')"
          # uv run scripts/ingest_data_script.py

          # echo "Running training at $(date '+%Y-%m-%d %H:%M:%S')"
          # uv run scripts/train_script.py

          # echo "Running scorer at $(date '+%Y-%m-%d %H:%M:%S')"
          # uv run scripts/score_script.py

  deplot-to-acr:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4.3.0
        with:
          name: build-artifacts
          path: artifacts

      - name: Login to Azure Container Registry (ACR)
        run: docker login -u "${{ secrets.FSDS_USERNAME }}" -p "${{ secrets.FSDS_ACR_TOKEN }}" saipunnafsds.azurecr.io

      - name: Build the Docker image
        run: |
          docker build --no-cache -t saipunnafsds.azurecr.io/housing-prediction:latest -f docker/Dockerfile .

      - name: Push Docker image to ACR
        run: |
          docker push saipunnafsds.azurecr.io/housing-prediction:latest
